// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WoodTrack.BLL.Database;

#nullable disable

namespace WoodTrack.BLL.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250701232227_Fix tools")]
    partial class Fixtools
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WoodTrack.Core.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ActiveUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ActivityId")
                        .HasColumnType("integer");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("ExceptionMessage")
                        .HasColumnType("text");

                    b.Property<string>("ExceptionType")
                        .HasColumnType("text");

                    b.Property<string>("HostName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ReferrerUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("RowId")
                        .HasColumnType("integer");

                    b.Property<string>("TableName")
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("WebBrowser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("WoodTrack.Core.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abrv")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abrv = "MO",
                            CountryId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Mostar"
                        },
                        new
                        {
                            Id = 2,
                            Abrv = "SA",
                            CountryId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Sarajevo"
                        },
                        new
                        {
                            Id = 3,
                            Abrv = "JC",
                            CountryId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Jajce"
                        },
                        new
                        {
                            Id = 4,
                            Abrv = "TZ",
                            CountryId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Tuzla"
                        },
                        new
                        {
                            Id = 5,
                            Abrv = "ZG",
                            CountryId = 2,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Zagreb"
                        });
                });

            modelBuilder.Entity("WoodTrack.Core.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abrv")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abrv = "BiH",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Bosna i Hercegovina"
                        },
                        new
                        {
                            Id = 2,
                            Abrv = "HR",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Hrvatska"
                        },
                        new
                        {
                            Id = 3,
                            Abrv = "SRB",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Srbija"
                        },
                        new
                        {
                            Id = 4,
                            Abrv = "CG",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Crna Gora"
                        },
                        new
                        {
                            Id = 5,
                            Abrv = "MKD",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Makedonija"
                        });
                });

            modelBuilder.Entity("WoodTrack.Core.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Read")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("WoodTrack.Core.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("TransactionId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("WoodTrack.Core.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("WoodTrack.Core.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PatientId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("WoodTrack.Core.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Barcode")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Height")
                        .HasColumnType("numeric");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Length")
                        .HasColumnType("numeric");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Width")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Barcode = "1234567890123",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Ručno izrađena kutija od oraha s rezbarijama.",
                            Height = 10m,
                            ImageUrl = "https://images.vexels.com/media/users/3/145231/isolated/lists/1a16851a4d591d118fab747af0f38b84-chair-furniture-icon.png",
                            IsDeleted = false,
                            IsEnable = true,
                            Length = 20m,
                            Manufacturer = "WoodArt",
                            Name = "Drvena kutija za nakit",
                            Price = 49.99m,
                            ProductCategoryId = 1,
                            Width = 15m
                        },
                        new
                        {
                            Id = 2,
                            Barcode = "1234567890124",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Set od 3 kašike od bukovog drveta, ručno izrađene.",
                            Height = 2m,
                            ImageUrl = "https://images.vexels.com/media/users/3/145231/isolated/lists/1a16851a4d591d118fab747af0f38b84-chair-furniture-icon.png",
                            IsDeleted = false,
                            IsEnable = true,
                            Length = 30m,
                            Manufacturer = "HandyCraft",
                            Name = "Set drvenih kašika",
                            Price = 24.50m,
                            ProductCategoryId = 2,
                            Width = 6m
                        },
                        new
                        {
                            Id = 3,
                            Barcode = "1234567890125",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Ručno izrađena stolica od hrastovine sa dekorativnim detaljima.",
                            Height = 90m,
                            ImageUrl = "https://images.vexels.com/media/users/3/145231/isolated/lists/1a16851a4d591d118fab747af0f38b84-chair-furniture-icon.png",
                            IsDeleted = false,
                            IsEnable = true,
                            Length = 45m,
                            Manufacturer = "CarveMasters",
                            Name = "Stolica od hrasta",
                            Price = 120.00m,
                            ProductCategoryId = 3,
                            Width = 45m
                        },
                        new
                        {
                            Id = 4,
                            Barcode = "1234567890126",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Elegantni zidni sat od bukve.",
                            Height = 5m,
                            ImageUrl = "https://images.vexels.com/media/users/3/145231/isolated/lists/1a16851a4d591d118fab747af0f38b84-chair-furniture-icon.png",
                            IsDeleted = false,
                            IsEnable = true,
                            Length = 35m,
                            Manufacturer = "WoodClock",
                            Name = "Drveni sat",
                            Price = 55.00m,
                            ProductCategoryId = 1,
                            Width = 35m
                        },
                        new
                        {
                            Id = 5,
                            Barcode = "1234567890127",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Ručni rad od trešnjinog drveta.",
                            Height = 3m,
                            ImageUrl = "https://images.vexels.com/media/users/3/145231/isolated/lists/1a16851a4d591d118fab747af0f38b84-chair-furniture-icon.png",
                            IsDeleted = false,
                            IsEnable = true,
                            Length = 40m,
                            Manufacturer = "TrayMasters",
                            Name = "Drveni poslužavnik",
                            Price = 35.99m,
                            ProductCategoryId = 2,
                            Width = 30m
                        },
                        new
                        {
                            Id = 6,
                            Barcode = "1234567890128",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Dekorativna zidna vješalica.",
                            Height = 10m,
                            ImageUrl = "https://images.vexels.com/media/users/3/145231/isolated/lists/1a16851a4d591d118fab747af0f38b84-chair-furniture-icon.png",
                            IsDeleted = false,
                            IsEnable = true,
                            Length = 50m,
                            Manufacturer = "HookWood",
                            Name = "Drvena vješalica",
                            Price = 22.50m,
                            ProductCategoryId = 1,
                            Width = 5m
                        },
                        new
                        {
                            Id = 7,
                            Barcode = "1234567890129",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Kvalitetna daska od bambusa.",
                            Height = 2m,
                            ImageUrl = "https://images.vexels.com/media/users/3/145231/isolated/lists/1a16851a4d591d118fab747af0f38b84-chair-furniture-icon.png",
                            IsDeleted = false,
                            IsEnable = true,
                            Length = 45m,
                            Manufacturer = "KitchenPro",
                            Name = "Daska za rezanje",
                            Price = 18.00m,
                            ProductCategoryId = 2,
                            Width = 30m
                        },
                        new
                        {
                            Id = 8,
                            Barcode = "1234567890130",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Masivni krevet od borovine.",
                            Height = 50m,
                            ImageUrl = "https://images.vexels.com/media/users/3/145231/isolated/lists/1a16851a4d591d118fab747af0f38b84-chair-furniture-icon.png",
                            IsDeleted = false,
                            IsEnable = true,
                            Length = 200m,
                            Manufacturer = "SolidSleep",
                            Name = "Drveni krevet",
                            Price = 350.00m,
                            ProductCategoryId = 3,
                            Width = 160m
                        },
                        new
                        {
                            Id = 9,
                            Barcode = "1234567890131",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Elegantna polica od hrastovine.",
                            Height = 180m,
                            ImageUrl = "https://images.vexels.com/media/users/3/145231/isolated/lists/1a16851a4d591d118fab747af0f38b84-chair-furniture-icon.png",
                            IsDeleted = false,
                            IsEnable = true,
                            Length = 80m,
                            Manufacturer = "ShelfCraft",
                            Name = "Polica za knjige",
                            Price = 80.00m,
                            ProductCategoryId = 3,
                            Width = 25m
                        },
                        new
                        {
                            Id = 10,
                            Barcode = "1234567890132",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Ručno izrađen tanjir od oraha.",
                            Height = 2m,
                            ImageUrl = "https://images.vexels.com/media/users/3/145231/isolated/lists/1a16851a4d591d118fab747af0f38b84-chair-furniture-icon.png",
                            IsDeleted = false,
                            IsEnable = true,
                            Length = 25m,
                            Manufacturer = "PlateWood",
                            Name = "Drveni tanjir",
                            Price = 15.00m,
                            ProductCategoryId = 2,
                            Width = 25m
                        });
                });

            modelBuilder.Entity("WoodTrack.Core.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "Dekorativni predmeti"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "Kuhinjski pribor"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "Namještaj"
                        });
                });

            modelBuilder.Entity("WoodTrack.Core.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("PublisherId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("WoodTrack.Core.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 3,
                            Comment = "Odlično!",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            ProductId = 1,
                            Rating = 5
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 3,
                            Comment = "Vrlo korisno.",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            ProductId = 2,
                            Rating = 4
                        },
                        new
                        {
                            Id = 3,
                            ClientId = 3,
                            Comment = "Nije po mom ukusu.",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            ProductId = 3,
                            Rating = 2
                        },
                        new
                        {
                            Id = 4,
                            ClientId = 3,
                            Comment = "Lijep dizajn.",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            ProductId = 4,
                            Rating = 4
                        },
                        new
                        {
                            Id = 5,
                            ClientId = 4,
                            Comment = "Solidno.",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            ProductId = 2,
                            Rating = 3
                        },
                        new
                        {
                            Id = 6,
                            ClientId = 4,
                            Comment = "Preporučujem.",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            ProductId = 3,
                            Rating = 4
                        },
                        new
                        {
                            Id = 7,
                            ClientId = 4,
                            Comment = "Savršeno!",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            ProductId = 4,
                            Rating = 5
                        },
                        new
                        {
                            Id = 8,
                            ClientId = 4,
                            Comment = "Očekivao sam više.",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            ProductId = 5,
                            Rating = 2
                        },
                        new
                        {
                            Id = 9,
                            ClientId = 5,
                            Comment = "Jako korisno.",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            ProductId = 1,
                            Rating = 4
                        },
                        new
                        {
                            Id = 10,
                            ClientId = 5,
                            Comment = "Izvrsno!",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            ProductId = 5,
                            Rating = 5
                        },
                        new
                        {
                            Id = 11,
                            ClientId = 5,
                            Comment = "Nije baš kvalitetno.",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            ProductId = 6,
                            Rating = 2
                        },
                        new
                        {
                            Id = 12,
                            ClientId = 5,
                            Comment = "Ok.",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            ProductId = 10,
                            Rating = 3
                        },
                        new
                        {
                            Id = 13,
                            ClientId = 2,
                            Comment = "Nisam zadovoljan.",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            ProductId = 1,
                            Rating = 2
                        },
                        new
                        {
                            Id = 14,
                            ClientId = 2,
                            Comment = "Može proći.",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            ProductId = 3,
                            Rating = 4
                        },
                        new
                        {
                            Id = 15,
                            ClientId = 2,
                            Comment = "Odlična izrada!",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            ProductId = 6,
                            Rating = 5
                        },
                        new
                        {
                            Id = 16,
                            ClientId = 1,
                            Comment = "Koristan proizvod.",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            ProductId = 7,
                            Rating = 4
                        },
                        new
                        {
                            Id = 17,
                            ClientId = 1,
                            Comment = "Toplo preporučujem.",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            ProductId = 8,
                            Rating = 5
                        },
                        new
                        {
                            Id = 18,
                            ClientId = 1,
                            Comment = "Nisam oduševljen.",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            ProductId = 9,
                            Rating = 2
                        });
                });

            modelBuilder.Entity("WoodTrack.Core.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("RoleLevel")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "7d31efe1-b048-4483-a9f7-587bf6cce41a",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR",
                            RoleLevel = 1
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "f4a44097-cc18-47e1-b888-b68b824ab094",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE",
                            RoleLevel = 2
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "02ed0e63-7255-4bc0-b403-7a5f06c80c1c",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "Client",
                            NormalizedName = "CLIENT",
                            RoleLevel = 3
                        });
                });

            modelBuilder.Entity("WoodTrack.Core.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("WoodTrack.Core.Tool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChargedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ChargerdDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Dimension")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ToolCategoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChargedByUserId");

                    b.HasIndex("ToolCategoryId");

                    b.ToTable("Tools");
                });

            modelBuilder.Entity("WoodTrack.Core.ToolCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ToolCategories");
                });

            modelBuilder.Entity("WoodTrack.Core.ToolService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CahrgedByUserId")
                        .HasColumnType("integer");

                    b.Property<int>("ChargedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeadlineFinishedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal>("NewDimension")
                        .HasColumnType("numeric");

                    b.Property<int>("ToolId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChargedByUserId");

                    b.HasIndex("ToolId");

                    b.ToTable("ToolServices");
                });

            modelBuilder.Entity("WoodTrack.Core.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFirstLogin")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<string>("ProfilePhoto")
                        .HasColumnType("text");

                    b.Property<string>("ProfilePhotoThumbnail")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("VerificationSent")
                        .HasColumnType("boolean");

                    b.Property<string>("WorkingHours")
                        .HasColumnType("text");

                    b.Property<int?>("YearsOfExperience")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "Mostar b.b",
                            BirthDate = new DateTime(1999, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c875bf71-ca86-46dc-a441-c8bf99976b11",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "site.admin@crystal_skin.com",
                            EmailConfirmed = true,
                            FirstName = "Site",
                            Gender = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsFirstLogin = false,
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "SITE.ADMIN@CRYSTAL_SKIN.COM",
                            NormalizedUserName = "SITE.ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEAGwZeqqUuR5X1kcmNbxwyTWxg2VDSnKdFTIFBQrQe5J/UTwcPlFFe6VkMa+yAmKgQ==",
                            PhoneNumber = "38762123456",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "site.admin",
                            VerificationSent = false
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "Mostar b.b",
                            BirthDate = new DateTime(2005, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "d154870a-a8de-4546-bdcb-99bb1a756fe9",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "employee@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Employee",
                            Gender = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsFirstLogin = false,
                            LastName = "1",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPLOYEE@MAIL.COM",
                            NormalizedUserName = "EMPLOYEE",
                            PasswordHash = "AQAAAAEAACcQAAAAEAGwZeqqUuR5X1kcmNbxwyTWxg2VDSnKdFTIFBQrQe5J/UTwcPlFFe6VkMa+yAmKgQ==",
                            PhoneNumber = "38762123456",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "employee",
                            VerificationSent = false
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "Mostar b.b",
                            BirthDate = new DateTime(1999, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "a128579b-897b-4743-a98f-60bf22e6e9b2",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "client1@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Client",
                            Gender = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsFirstLogin = false,
                            LastName = "1",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT1@MAIL.COM",
                            NormalizedUserName = "CLIENT1",
                            PasswordHash = "AQAAAAEAACcQAAAAEAGwZeqqUuR5X1kcmNbxwyTWxg2VDSnKdFTIFBQrQe5J/UTwcPlFFe6VkMa+yAmKgQ==",
                            PhoneNumber = "38762123456",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "client1",
                            VerificationSent = false
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "Mostar b.b",
                            BirthDate = new DateTime(1979, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "482f5c73-1a48-44ce-ac34-d3f179cb226a",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "client2@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Client",
                            Gender = 2,
                            IsActive = true,
                            IsDeleted = false,
                            IsFirstLogin = false,
                            LastName = "2",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT2@MAIL.COM",
                            NormalizedUserName = "CLIENT2",
                            PasswordHash = "AQAAAAEAACcQAAAAEAGwZeqqUuR5X1kcmNbxwyTWxg2VDSnKdFTIFBQrQe5J/UTwcPlFFe6VkMa+yAmKgQ==",
                            PhoneNumber = "38762123456",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "client2",
                            VerificationSent = false
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "Mostar b.b",
                            BirthDate = new DateTime(1989, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "439d9ecd-84de-40e8-a4e2-1f03d8bd8b36",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "client3@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Client",
                            Gender = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsFirstLogin = false,
                            LastName = "3",
                            LockoutEnabled = false,
                            NormalizedEmail = "Client3@MAIL.COM",
                            NormalizedUserName = "CLIENT3",
                            PasswordHash = "AQAAAAEAACcQAAAAEAGwZeqqUuR5X1kcmNbxwyTWxg2VDSnKdFTIFBQrQe5J/UTwcPlFFe6VkMa+yAmKgQ==",
                            PhoneNumber = "38762123456",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "client3",
                            VerificationSent = false
                        });
                });

            modelBuilder.Entity("WoodTrack.Core.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("WoodTrack.Core.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("WoodTrack.Core.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            RoleId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            RoleId = 3,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            RoleId = 3,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            RoleId = 3,
                            UserId = 5
                        });
                });

            modelBuilder.Entity("WoodTrack.Core.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WoodTrack.Core.ActivityLog", b =>
                {
                    b.HasOne("WoodTrack.Core.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WoodTrack.Core.City", b =>
                {
                    b.HasOne("WoodTrack.Core.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("WoodTrack.Core.Notification", b =>
                {
                    b.HasOne("WoodTrack.Core.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WoodTrack.Core.Order", b =>
                {
                    b.HasOne("WoodTrack.Core.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("WoodTrack.Core.OrderItem", b =>
                {
                    b.HasOne("WoodTrack.Core.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WoodTrack.Core.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WoodTrack.Core.Payment", b =>
                {
                    b.HasOne("WoodTrack.Core.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WoodTrack.Core.User", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("WoodTrack.Core.Product", b =>
                {
                    b.HasOne("WoodTrack.Core.ProductCategory", "ProductCategory")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("WoodTrack.Core.Report", b =>
                {
                    b.HasOne("WoodTrack.Core.User", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("WoodTrack.Core.Review", b =>
                {
                    b.HasOne("WoodTrack.Core.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WoodTrack.Core.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId");

                    b.Navigation("Client");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WoodTrack.Core.RoleClaim", b =>
                {
                    b.HasOne("WoodTrack.Core.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WoodTrack.Core.Tool", b =>
                {
                    b.HasOne("WoodTrack.Core.User", "ChargedByUser")
                        .WithMany()
                        .HasForeignKey("ChargedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WoodTrack.Core.ToolCategory", "ToolCategory")
                        .WithMany()
                        .HasForeignKey("ToolCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChargedByUser");

                    b.Navigation("ToolCategory");
                });

            modelBuilder.Entity("WoodTrack.Core.ToolService", b =>
                {
                    b.HasOne("WoodTrack.Core.User", "ChargedByUser")
                        .WithMany()
                        .HasForeignKey("ChargedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WoodTrack.Core.Tool", "Tool")
                        .WithMany()
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChargedByUser");

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("WoodTrack.Core.User", b =>
                {
                    b.HasOne("WoodTrack.Core.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("WoodTrack.Core.UserClaim", b =>
                {
                    b.HasOne("WoodTrack.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WoodTrack.Core.UserLogin", b =>
                {
                    b.HasOne("WoodTrack.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WoodTrack.Core.UserRole", b =>
                {
                    b.HasOne("WoodTrack.Core.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WoodTrack.Core.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WoodTrack.Core.UserToken", b =>
                {
                    b.HasOne("WoodTrack.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WoodTrack.Core.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("WoodTrack.Core.Product", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("WoodTrack.Core.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("WoodTrack.Core.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
