// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WoodTrack.BLL.Database;

#nullable disable

namespace WoodTrack.BLL.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250622222614_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WoodTrack.Core.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ActiveUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ActivityId")
                        .HasColumnType("integer");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("ExceptionMessage")
                        .HasColumnType("text");

                    b.Property<string>("ExceptionType")
                        .HasColumnType("text");

                    b.Property<string>("HostName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ReferrerUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("RowId")
                        .HasColumnType("integer");

                    b.Property<string>("TableName")
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("WebBrowser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("WoodTrack.Core.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abrv")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abrv = "MO",
                            CountryId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Mostar"
                        },
                        new
                        {
                            Id = 2,
                            Abrv = "SA",
                            CountryId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Sarajevo"
                        },
                        new
                        {
                            Id = 3,
                            Abrv = "JC",
                            CountryId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Jajce"
                        },
                        new
                        {
                            Id = 4,
                            Abrv = "TZ",
                            CountryId = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Tuzla"
                        },
                        new
                        {
                            Id = 5,
                            Abrv = "ZG",
                            CountryId = 2,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Zagreb"
                        });
                });

            modelBuilder.Entity("WoodTrack.Core.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abrv")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abrv = "BiH",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Bosna i Hercegovina"
                        },
                        new
                        {
                            Id = 2,
                            Abrv = "HR",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Hrvatska"
                        },
                        new
                        {
                            Id = 3,
                            Abrv = "SRB",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Srbija"
                        },
                        new
                        {
                            Id = 4,
                            Abrv = "CG",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Crna Gora"
                        },
                        new
                        {
                            Id = 5,
                            Abrv = "MKD",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Makedonija"
                        });
                });

            modelBuilder.Entity("WoodTrack.Core.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Duration = new TimeSpan(0, 0, 10, 0, 0),
                            IsDeleted = false,
                            Name = "Konsultacija kože"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Duration = new TimeSpan(0, 0, 20, 0, 0),
                            IsDeleted = false,
                            Name = "Tretman akni"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Duration = new TimeSpan(0, 0, 30, 0, 0),
                            IsDeleted = false,
                            Name = "Uklanjanje mladeža"
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Duration = new TimeSpan(0, 0, 35, 0, 0),
                            IsDeleted = false,
                            Name = "Laser terapija"
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Duration = new TimeSpan(0, 0, 40, 0, 0),
                            IsDeleted = false,
                            Name = "Hemijski piling"
                        });
                });

            modelBuilder.Entity("WoodTrack.Core.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Read")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 5, 20, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Message = "Dobrodošli u dermatološki centar! Vaš profil je aktiviran.",
                            Read = false,
                            UserId = 3
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 5, 22, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Message = "Termin pregleda potvrđen za 03.06.2025. u 11:00.",
                            Read = true,
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 5, 25, 10, 15, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Message = "Vaši rezultati testiranja kože su spremni za preuzimanje.",
                            Read = false,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2025, 5, 21, 8, 45, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Message = "Podsjetnik: tretman odstranjivanja madeža 05.06.2025. u 12:00.",
                            Read = false,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2025, 5, 23, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Message = "Upute za pripremu kože prije tretmana su poslane na vašu e-poštu.",
                            Read = true,
                            UserId = 4
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2025, 5, 26, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Message = "Novi savjet za njegu kože dostupan je na vašem profilu.",
                            Read = false,
                            UserId = 4
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2025, 5, 19, 13, 20, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Message = "Vaš zahtjev za promjenu termina je odobren.",
                            Read = true,
                            UserId = 5
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2025, 5, 27, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Message = "Podsjetnik: savjetovanje s dermatologom sutra u 10:00.",
                            Read = false,
                            UserId = 5
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(2025, 5, 28, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Message = "Ponuda: 10% popusta na paket tretmana lica.",
                            Read = false,
                            UserId = 5
                        });
                });

            modelBuilder.Entity("WoodTrack.Core.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeliveryMethod")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("TransactionId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Adresa 3",
                            ClientId = 3,
                            Date = new DateTime(2025, 5, 11, 22, 26, 13, 708, DateTimeKind.Utc).AddTicks(4633),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryMethod = "dostavaa",
                            FullName = "Klijent 3",
                            IsDeleted = false,
                            Note = "Napomena za narudžbu 1",
                            PaymentMethod = "kartica",
                            PhoneNumber = "061-100030",
                            Status = 2,
                            TotalAmount = 276m,
                            TransactionId = "i_0001"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Adresa 3",
                            ClientId = 3,
                            Date = new DateTime(2025, 4, 13, 22, 26, 13, 708, DateTimeKind.Utc).AddTicks(4747),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryMethod = "dostavaa",
                            FullName = "Klijent 3",
                            IsDeleted = false,
                            Note = "Napomena za narudžbu 2",
                            PaymentMethod = "kartica",
                            PhoneNumber = "061-100031",
                            Status = 2,
                            TotalAmount = 175m,
                            TransactionId = "i_0002"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Adresa 3",
                            ClientId = 3,
                            Date = new DateTime(2025, 3, 28, 22, 26, 13, 708, DateTimeKind.Utc).AddTicks(4807),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryMethod = "dostavaa",
                            FullName = "Klijent 3",
                            IsDeleted = false,
                            Note = "Napomena za narudžbu 3",
                            PaymentMethod = "kartica",
                            PhoneNumber = "061-100032",
                            Status = 2,
                            TotalAmount = 177m,
                            TransactionId = "i_0003"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Adresa 4",
                            ClientId = 4,
                            Date = new DateTime(2025, 3, 27, 22, 26, 13, 708, DateTimeKind.Utc).AddTicks(4825),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryMethod = "dostavaa",
                            FullName = "Klijent 4",
                            IsDeleted = false,
                            Note = "Napomena za narudžbu 4",
                            PaymentMethod = "kartica",
                            PhoneNumber = "061-100040",
                            Status = 2,
                            TotalAmount = 205m,
                            TransactionId = "i_0004"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Adresa 4",
                            ClientId = 4,
                            Date = new DateTime(2025, 4, 15, 22, 26, 13, 708, DateTimeKind.Utc).AddTicks(4840),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryMethod = "dostavaa",
                            FullName = "Klijent 4",
                            IsDeleted = false,
                            Note = "Napomena za narudžbu 5",
                            PaymentMethod = "kartica",
                            PhoneNumber = "061-100041",
                            Status = 2,
                            TotalAmount = 132m,
                            TransactionId = "i_0005"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Adresa 4",
                            ClientId = 4,
                            Date = new DateTime(2025, 3, 22, 22, 26, 13, 708, DateTimeKind.Utc).AddTicks(4854),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryMethod = "dostavaa",
                            FullName = "Klijent 4",
                            IsDeleted = false,
                            Note = "Napomena za narudžbu 6",
                            PaymentMethod = "kartica",
                            PhoneNumber = "061-100042",
                            Status = 2,
                            TotalAmount = 228m,
                            TransactionId = "i_0006"
                        },
                        new
                        {
                            Id = 7,
                            Address = "Adresa 5",
                            ClientId = 5,
                            Date = new DateTime(2025, 6, 3, 22, 26, 13, 708, DateTimeKind.Utc).AddTicks(4873),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryMethod = "dostavaa",
                            FullName = "Klijent 5",
                            IsDeleted = false,
                            Note = "Napomena za narudžbu 7",
                            PaymentMethod = "kartica",
                            PhoneNumber = "061-100050",
                            Status = 2,
                            TotalAmount = 148m,
                            TransactionId = "i_0007"
                        },
                        new
                        {
                            Id = 8,
                            Address = "Adresa 5",
                            ClientId = 5,
                            Date = new DateTime(2025, 6, 4, 22, 26, 13, 708, DateTimeKind.Utc).AddTicks(4889),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryMethod = "dostavaa",
                            FullName = "Klijent 5",
                            IsDeleted = false,
                            Note = "Napomena za narudžbu 8",
                            PaymentMethod = "kartica",
                            PhoneNumber = "061-100051",
                            Status = 2,
                            TotalAmount = 169m,
                            TransactionId = "i_0008"
                        },
                        new
                        {
                            Id = 9,
                            Address = "Adresa 5",
                            ClientId = 5,
                            Date = new DateTime(2025, 6, 4, 22, 26, 13, 708, DateTimeKind.Utc).AddTicks(4927),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryMethod = "dostavaa",
                            FullName = "Klijent 5",
                            IsDeleted = false,
                            Note = "Napomena za narudžbu 9",
                            PaymentMethod = "kartica",
                            PhoneNumber = "061-100052",
                            Status = 2,
                            TotalAmount = 99m,
                            TransactionId = "i_0009"
                        });
                });

            modelBuilder.Entity("WoodTrack.Core.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OrderId = 1,
                            ProductId = 13,
                            Quantity = 2,
                            UnitPrice = 43m
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OrderId = 1,
                            ProductId = 3,
                            Quantity = 2,
                            UnitPrice = 44m
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OrderId = 1,
                            ProductId = 10,
                            Quantity = 2,
                            UnitPrice = 51m
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OrderId = 2,
                            ProductId = 1,
                            Quantity = 2,
                            UnitPrice = 39m
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OrderId = 2,
                            ProductId = 11,
                            Quantity = 1,
                            UnitPrice = 41m
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OrderId = 2,
                            ProductId = 8,
                            Quantity = 1,
                            UnitPrice = 39m
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OrderId = 2,
                            ProductId = 7,
                            Quantity = 1,
                            UnitPrice = 17m
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OrderId = 3,
                            ProductId = 13,
                            Quantity = 1,
                            UnitPrice = 45m
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OrderId = 3,
                            ProductId = 4,
                            Quantity = 1,
                            UnitPrice = 46m
                        },
                        new
                        {
                            Id = 10,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OrderId = 3,
                            ProductId = 11,
                            Quantity = 2,
                            UnitPrice = 43m
                        },
                        new
                        {
                            Id = 11,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OrderId = 4,
                            ProductId = 10,
                            Quantity = 1,
                            UnitPrice = 59m
                        },
                        new
                        {
                            Id = 12,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OrderId = 4,
                            ProductId = 14,
                            Quantity = 2,
                            UnitPrice = 58m
                        },
                        new
                        {
                            Id = 13,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OrderId = 4,
                            ProductId = 3,
                            Quantity = 2,
                            UnitPrice = 15m
                        },
                        new
                        {
                            Id = 14,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OrderId = 5,
                            ProductId = 2,
                            Quantity = 2,
                            UnitPrice = 24m
                        },
                        new
                        {
                            Id = 15,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OrderId = 5,
                            ProductId = 8,
                            Quantity = 2,
                            UnitPrice = 42m
                        },
                        new
                        {
                            Id = 16,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OrderId = 6,
                            ProductId = 13,
                            Quantity = 2,
                            UnitPrice = 49m
                        },
                        new
                        {
                            Id = 17,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OrderId = 6,
                            ProductId = 12,
                            Quantity = 1,
                            UnitPrice = 32m
                        },
                        new
                        {
                            Id = 18,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OrderId = 6,
                            ProductId = 3,
                            Quantity = 2,
                            UnitPrice = 49m
                        },
                        new
                        {
                            Id = 19,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OrderId = 7,
                            ProductId = 12,
                            Quantity = 2,
                            UnitPrice = 50m
                        },
                        new
                        {
                            Id = 20,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OrderId = 7,
                            ProductId = 13,
                            Quantity = 2,
                            UnitPrice = 24m
                        },
                        new
                        {
                            Id = 21,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OrderId = 8,
                            ProductId = 15,
                            Quantity = 2,
                            UnitPrice = 58m
                        },
                        new
                        {
                            Id = 22,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OrderId = 8,
                            ProductId = 10,
                            Quantity = 1,
                            UnitPrice = 53m
                        },
                        new
                        {
                            Id = 23,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OrderId = 9,
                            ProductId = 11,
                            Quantity = 1,
                            UnitPrice = 17m
                        },
                        new
                        {
                            Id = 24,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OrderId = 9,
                            ProductId = 4,
                            Quantity = 1,
                            UnitPrice = 51m
                        },
                        new
                        {
                            Id = 25,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OrderId = 9,
                            ProductId = 1,
                            Quantity = 1,
                            UnitPrice = 31m
                        });
                });

            modelBuilder.Entity("WoodTrack.Core.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PatientId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("WoodTrack.Core.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Barcode")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ingredients")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("boolean");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Barcode = "1234567890123",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Krema za dubinsku hidrataciju suhe kože.",
                            ImageUrl = "https://logotyp.us/file/dm.svg",
                            Ingredients = "Aqua, Glycerin, Aloe Vera",
                            IsDeleted = false,
                            IsEnable = true,
                            Manufacturer = "Dermaline",
                            Name = "Hidratantna krema",
                            Price = 19.99m,
                            ProductCategoryId = 1,
                            Stock = 100
                        },
                        new
                        {
                            Id = 2,
                            Barcode = "1112223330000",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Specijalizovana krema za tretman akni i mitesera.",
                            ImageUrl = "https://logotyp.us/file/dm.svg",
                            Ingredients = "Salicylic Acid, Tea Tree Oil",
                            IsDeleted = false,
                            IsEnable = true,
                            Manufacturer = "AcneFix",
                            Name = "Krema za akne",
                            Price = 22.50m,
                            ProductCategoryId = 1,
                            Stock = 80
                        },
                        new
                        {
                            Id = 3,
                            Barcode = "4567891234567",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Regenerišuća noćna krema protiv bora.",
                            ImageUrl = "https://logotyp.us/file/dm.svg",
                            Ingredients = "Retinol, Hyaluronic Acid",
                            IsDeleted = false,
                            IsEnable = true,
                            Manufacturer = "YouthSkin",
                            Name = "Noćna anti-age krema",
                            Price = 29.90m,
                            ProductCategoryId = 1,
                            Stock = 60
                        },
                        new
                        {
                            Id = 4,
                            Barcode = "8887776665554",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Micelarna voda za uklanjanje šminke i nečistoća.",
                            ImageUrl = "https://logotyp.us/file/dm.svg",
                            Ingredients = "Aqua, Micelles, Chamomile Extract",
                            IsDeleted = false,
                            IsEnable = true,
                            Manufacturer = "CleanFace",
                            Name = "Micelarna voda",
                            Price = 11.99m,
                            ProductCategoryId = 1,
                            Stock = 120
                        },
                        new
                        {
                            Id = 5,
                            Barcode = "9090901234567",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Prirodna maska sa zelenom glinom za čišćenje pora.",
                            ImageUrl = "https://logotyp.us/file/dm.svg",
                            Ingredients = "Green Clay, Aloe Vera",
                            IsDeleted = false,
                            IsEnable = true,
                            Manufacturer = "NatureBeauty",
                            Name = "Maska za lice - glina",
                            Price = 13.75m,
                            ProductCategoryId = 1,
                            Stock = 95
                        },
                        new
                        {
                            Id = 6,
                            Barcode = "9876543210987",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Osvježavajući gel za tuširanje sa citrusima.",
                            ImageUrl = "https://logotyp.us/file/dm.svg",
                            Ingredients = "Aqua, Sodium Laureth Sulfate, Citrus Extract",
                            IsDeleted = false,
                            IsEnable = true,
                            Manufacturer = "BodyFresh",
                            Name = "Gel za tuširanje",
                            Price = 9.49m,
                            ProductCategoryId = 2,
                            Stock = 200
                        },
                        new
                        {
                            Id = 7,
                            Barcode = "3332221114448",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Hidratantni losion za svakodnevnu njegu kože tijela.",
                            ImageUrl = "https://logotyp.us/file/dm.svg",
                            Ingredients = "Shea Butter, Vitamin E",
                            IsDeleted = false,
                            IsEnable = true,
                            Manufacturer = "SoftSkin",
                            Name = "Losion za tijelo",
                            Price = 12.30m,
                            ProductCategoryId = 2,
                            Stock = 150
                        },
                        new
                        {
                            Id = 8,
                            Barcode = "5656565656565",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Bogata krema za njegu i zaštitu ruku.",
                            ImageUrl = "https://logotyp.us/file/dm.svg",
                            Ingredients = "Glycerin, Panthenol",
                            IsDeleted = false,
                            IsEnable = true,
                            Manufacturer = "CareHands",
                            Name = "Krema za ruke",
                            Price = 5.99m,
                            ProductCategoryId = 2,
                            Stock = 300
                        },
                        new
                        {
                            Id = 9,
                            Barcode = "7778889991112",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Prirodno ulje za relaksirajuću masažu.",
                            ImageUrl = "https://logotyp.us/file/dm.svg",
                            Ingredients = "Lavender Oil, Almond Oil",
                            IsDeleted = false,
                            IsEnable = true,
                            Manufacturer = "RelaxTime",
                            Name = "Ulje za masažu",
                            Price = 18.00m,
                            ProductCategoryId = 2,
                            Stock = 70
                        },
                        new
                        {
                            Id = 10,
                            Barcode = "2223334445556",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Piling sa morskom soli za glatku kožu.",
                            ImageUrl = "https://logotyp.us/file/dm.svg",
                            Ingredients = "Sea Salt, Coconut Oil",
                            IsDeleted = false,
                            IsEnable = true,
                            Manufacturer = "SeaBeauty",
                            Name = "Piling za tijelo",
                            Price = 15.90m,
                            ProductCategoryId = 2,
                            Stock = 85
                        },
                        new
                        {
                            Id = 11,
                            Barcode = "1112223334445",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Kompleks vitamina i minerala za svakodnevnu upotrebu.",
                            ImageUrl = "https://logotyp.us/file/dm.svg",
                            Ingredients = "Vitamin A, C, D, E, Zinc, Iron",
                            IsDeleted = false,
                            IsEnable = true,
                            Manufacturer = "NutriLife",
                            Name = "Multivitamin kapsule",
                            Price = 14.99m,
                            ProductCategoryId = 3,
                            Stock = 150
                        },
                        new
                        {
                            Id = 12,
                            Barcode = "0001112223334",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Kapsule ribljeg ulja bogate omega-3 masnim kiselinama.",
                            ImageUrl = "https://logotyp.us/file/dm.svg",
                            Ingredients = "Fish Oil, EPA, DHA",
                            IsDeleted = false,
                            IsEnable = true,
                            Manufacturer = "HeartWell",
                            Name = "Omega 3 kapsule",
                            Price = 17.49m,
                            ProductCategoryId = 3,
                            Stock = 130
                        },
                        new
                        {
                            Id = 13,
                            Barcode = "4445556667778",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Tablete vitamina C za jačanje imuniteta.",
                            ImageUrl = "https://logotyp.us/file/dm.svgg",
                            Ingredients = "Vitamin C, Citrus Bioflavonoids",
                            IsDeleted = false,
                            IsEnable = true,
                            Manufacturer = "C-Boost",
                            Name = "Vitamin C tablete",
                            Price = 6.99m,
                            ProductCategoryId = 3,
                            Stock = 180
                        },
                        new
                        {
                            Id = 14,
                            Barcode = "5556667778889",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Probiotici za zdravlje crijeva.",
                            ImageUrl = "https://logotyp.us/file/dm.svg",
                            Ingredients = "Lactobacillus, Bifidobacterium",
                            IsDeleted = false,
                            IsEnable = true,
                            Manufacturer = "GutHealth",
                            Name = "Probiotik kapsule",
                            Price = 16.75m,
                            ProductCategoryId = 3,
                            Stock = 110
                        },
                        new
                        {
                            Id = 15,
                            Barcode = "6667778889990",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Tablete za podršku nervnom sistemu i mišićima.",
                            ImageUrl = "https://logotyp.us/file/dm.svg",
                            Ingredients = "Magnesium Citrate",
                            IsDeleted = false,
                            IsEnable = true,
                            Manufacturer = "VitalPower",
                            Name = "Magnezijum tablete",
                            Price = 8.20m,
                            ProductCategoryId = 3,
                            Stock = 140
                        });
                });

            modelBuilder.Entity("WoodTrack.Core.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "Njega lica"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "Njega tijela"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "Dodaci prehrani"
                        });
                });

            modelBuilder.Entity("WoodTrack.Core.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("PublisherId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("WoodTrack.Core.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("WoodTrack.Core.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("RoleLevel")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "56103a24-16e1-4609-85a3-cc6f465516c4",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR",
                            RoleLevel = 1
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "6770931e-5b70-4611-970d-4c52f3c2ae87",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE",
                            RoleLevel = 2
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "675d434e-5d92-40b4-b063-1ee43ce666aa",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "Client",
                            NormalizedName = "CLIENT",
                            RoleLevel = 3
                        });
                });

            modelBuilder.Entity("WoodTrack.Core.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("WoodTrack.Core.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFirstLogin")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<string>("ProfilePhoto")
                        .HasColumnType("text");

                    b.Property<string>("ProfilePhotoThumbnail")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("VerificationSent")
                        .HasColumnType("boolean");

                    b.Property<string>("WorkingHours")
                        .HasColumnType("text");

                    b.Property<int?>("YearsOfExperience")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "Mostar b.b",
                            BirthDate = new DateTime(1999, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "b1bb1b25-894e-4e25-bd6e-01eefb1aff9d",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "site.admin@crystal_skin.com",
                            EmailConfirmed = true,
                            FirstName = "Site",
                            Gender = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsFirstLogin = false,
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "SITE.ADMIN@CRYSTAL_SKIN.COM",
                            NormalizedUserName = "SITE.ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEAGwZeqqUuR5X1kcmNbxwyTWxg2VDSnKdFTIFBQrQe5J/UTwcPlFFe6VkMa+yAmKgQ==",
                            PhoneNumber = "38762123456",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "site.admin",
                            VerificationSent = false
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "Mostar b.b",
                            BirthDate = new DateTime(2005, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "f1e11ec2-1d38-4d0b-aa38-ac662ae1cf03",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "employee@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Employee",
                            Gender = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsFirstLogin = false,
                            LastName = "1",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPLOYEE@MAIL.COM",
                            NormalizedUserName = "EMPLOYEE",
                            PasswordHash = "AQAAAAEAACcQAAAAEAGwZeqqUuR5X1kcmNbxwyTWxg2VDSnKdFTIFBQrQe5J/UTwcPlFFe6VkMa+yAmKgQ==",
                            PhoneNumber = "38762123456",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "employee",
                            VerificationSent = false
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "Mostar b.b",
                            BirthDate = new DateTime(1999, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "3e9727dd-184d-4152-84d8-8833a6aa383f",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "client1@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Client",
                            Gender = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsFirstLogin = false,
                            LastName = "1",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT1@MAIL.COM",
                            NormalizedUserName = "CLIENT1",
                            PasswordHash = "AQAAAAEAACcQAAAAEAGwZeqqUuR5X1kcmNbxwyTWxg2VDSnKdFTIFBQrQe5J/UTwcPlFFe6VkMa+yAmKgQ==",
                            PhoneNumber = "38762123456",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "client1",
                            VerificationSent = false
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "Mostar b.b",
                            BirthDate = new DateTime(1979, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "ffdc56fa-aa46-4b08-9828-f66c711d15ac",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "client2@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Client",
                            Gender = 2,
                            IsActive = true,
                            IsDeleted = false,
                            IsFirstLogin = false,
                            LastName = "2",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT2@MAIL.COM",
                            NormalizedUserName = "CLIENT2",
                            PasswordHash = "AQAAAAEAACcQAAAAEAGwZeqqUuR5X1kcmNbxwyTWxg2VDSnKdFTIFBQrQe5J/UTwcPlFFe6VkMa+yAmKgQ==",
                            PhoneNumber = "38762123456",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "client2",
                            VerificationSent = false
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "Mostar b.b",
                            BirthDate = new DateTime(1989, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "a6b03ffa-142d-4a8b-8c67-9752bda08128",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "client3@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Client",
                            Gender = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsFirstLogin = false,
                            LastName = "3",
                            LockoutEnabled = false,
                            NormalizedEmail = "Client3@MAIL.COM",
                            NormalizedUserName = "CLIENT3",
                            PasswordHash = "AQAAAAEAACcQAAAAEAGwZeqqUuR5X1kcmNbxwyTWxg2VDSnKdFTIFBQrQe5J/UTwcPlFFe6VkMa+yAmKgQ==",
                            PhoneNumber = "38762123456",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "client3",
                            VerificationSent = false
                        });
                });

            modelBuilder.Entity("WoodTrack.Core.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("WoodTrack.Core.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("WoodTrack.Core.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            RoleId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            RoleId = 3,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            RoleId = 3,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            RoleId = 3,
                            UserId = 5
                        });
                });

            modelBuilder.Entity("WoodTrack.Core.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WoodTrack.Core.ActivityLog", b =>
                {
                    b.HasOne("WoodTrack.Core.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WoodTrack.Core.City", b =>
                {
                    b.HasOne("WoodTrack.Core.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("WoodTrack.Core.Notification", b =>
                {
                    b.HasOne("WoodTrack.Core.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WoodTrack.Core.Order", b =>
                {
                    b.HasOne("WoodTrack.Core.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("WoodTrack.Core.OrderItem", b =>
                {
                    b.HasOne("WoodTrack.Core.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WoodTrack.Core.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WoodTrack.Core.Payment", b =>
                {
                    b.HasOne("WoodTrack.Core.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WoodTrack.Core.User", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("WoodTrack.Core.Product", b =>
                {
                    b.HasOne("WoodTrack.Core.ProductCategory", "ProductCategory")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("WoodTrack.Core.Report", b =>
                {
                    b.HasOne("WoodTrack.Core.User", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("WoodTrack.Core.Review", b =>
                {
                    b.HasOne("WoodTrack.Core.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WoodTrack.Core.User", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WoodTrack.Core.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Client");

                    b.Navigation("Employee");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WoodTrack.Core.RoleClaim", b =>
                {
                    b.HasOne("WoodTrack.Core.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WoodTrack.Core.User", b =>
                {
                    b.HasOne("WoodTrack.Core.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("WoodTrack.Core.UserClaim", b =>
                {
                    b.HasOne("WoodTrack.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WoodTrack.Core.UserLogin", b =>
                {
                    b.HasOne("WoodTrack.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WoodTrack.Core.UserRole", b =>
                {
                    b.HasOne("WoodTrack.Core.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WoodTrack.Core.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WoodTrack.Core.UserToken", b =>
                {
                    b.HasOne("WoodTrack.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WoodTrack.Core.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("WoodTrack.Core.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("WoodTrack.Core.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
